<tool id="whisper" name="Speach to Text" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="20.01" license="MIT">
    <description>
        Transcribe audio or video files to text using the whisper.
    </description>
    <macros>
        <token name="@TOOL_VERSION@">20231117</token>
        <token name="@VERSION_SUFFIX@">0</token>
    </macros>
    <requirements>
        <container type="docker">itisalirh/whisper:@TOOL_VERSION@</container>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        mkdir -p ./outs ./models &&
        ln -s '$infile' ./input.${infile.ext} &&
        whisper ./input.${infile.ext}
        --model $model
        --output_dir ./outs
        --threads \${GALAXY_SLOTS:-2}
        --task transcribe
        --output_format all
        --verbose False
        --model_dir \${OPENAI_WHISPER_MODEL_DIR:-./models}
        #if $language != "None":
            --language '$language'
        #end if
        #if $advanced.temperature:
            --temperature '$temperature'
        #end if
        #if $advanced.best_of:
            --best_of '$advanced.best_of'
        #end if
        #if $advanced.beam_size:
            --beam_size '$advanced.beam_size'
        #end if
        #if $advanced.patience:
            --patience '$advanced.patience'
        #end if
        #if $advanced.length_penalty:
            --length_penalty '$advanced.length_penalty'
        #end if
        #if $advanced.suppress_tokens:
            --suppress_tokens '$advanced.suppress_tokens'
        #end if
        #if $advanced.initial_prompt != "None":
            --initial_prompt '$advanced.initial_prompt'
        #end if
        #if $advanced.condition_on_previous_text:
            --condition_on_previous_text '$advanced.condition_on_previous_text'
        #end if
        #if $advanced.temperature_increment_on_fallback:
            --temperature_increment_on_fallback '$advanced.temperature_increment_on_fallback'
        #end if
        #if $advanced.compression_ratio_threshold:
            --compression_ratio_threshold '$advanced.compression_ratio_threshold'
        #end if
        #if $advanced.logprob_threshold:
            --logprob_threshold '$advanced.logprob_threshold'
        #end if
        #if $advanced.no_speech_threshold:
            --no_speech_threshold '$advanced.no_speech_threshold'
        #end if
        #if $advanced.word_timestamps.word_timestamps == "True":
            --word_timestamps '$advanced.word_timestamps.word_timestamps'
            #if $advanced.word_timestamps.highlight_words:
                --highlight_words '$advanced.word_timestamps.highlight_words'
            #end if
            #if $advanced.word_timestamps.max_line_width:
                --max_line_width '$advanced.word_timestamps.max_line_width'
            #end if
            #if $advanced.word_timestamps.max_line_count:
                --max_line_count '$advanced.word_timestamps.max_line_count'
            #end if
            #if $advanced.word_timestamps.max_words_per_line:
                --max_words_per_line '$advanced.word_timestamps.max_words_per_line'
            #end if
        #end if
        ]]>
    </command>
    <environment_variables>
        <!-- we will disable the progress bar which is printed to stderr -->
        <environment_variable name="TQDM_DISABLE">1</environment_variable>
    </environment_variables>
    <inputs>
        <param name="infile" type="data" format="wav,mp3,mkv,flv,mpg,ogg,wma,mp4" label="Select audio or video file" />
        <param argument="--model" type="select" label="Speech to Text Model">
            <option value="tiny">Tiny (~32x faster than the large model)</option>
            <option value="base">Base (~16x faster than the large model)</option>
            <option value="small" selected="true">Small (~6x faster than the large model)</option>
            <option value="medium">Medium (~2x faster than the large model)</option>
            <option value="large">Large</option>
        </param>
        <param argument="--language" type="select" label="Language">
            <option value="None">Auto (detect language)</option>
            <option value="Afrikaans">Afrikaans</option>
            <option value="Albanian">Albanian</option>
            <option value="Amharic">Amharic</option>
            <option value="Arabic">Arabic</option>
            <option value="Armenian">Armenian</option>
            <option value="Assamese">Assamese</option>
            <option value="Azerbaijani">Azerbaijani</option>
            <option value="Bashkir">Bashkir</option>
            <option value="Basque">Basque</option>
            <option value="Belarusian">Belarusian</option>
            <option value="Bengali">Bengali</option>
            <option value="Bosnian">Bosnian</option>
            <option value="Breton">Breton</option>
            <option value="Bulgarian">Bulgarian</option>
            <option value="Burmese">Burmese</option>
            <option value="Cantonese">Cantonese</option>
            <option value="Castilian">Castilian</option>
            <option value="Catalan">Catalan</option>
            <option value="Chinese">Chinese</option>
            <option value="Croatian">Croatian</option>
            <option value="Czech">Czech</option>
            <option value="Danish">Danish</option>
            <option value="Dutch">Dutch</option>
            <option value="English">English</option>
            <option value="Estonian">Estonian</option>
            <option value="Faroese">Faroese</option>
            <option value="Finnish">Finnish</option>
            <option value="Flemish">Flemish</option>
            <option value="French">French</option>
            <option value="Galician">Galician</option>
            <option value="Georgian">Georgian</option>
            <option value="German">German</option>
            <option value="Greek">Greek</option>
            <option value="Gujarati">Gujarati</option>
            <option value="Haitian">Haitian</option>
            <option value="Haitian Creole">Haitian Creole</option>
            <option value="Hausa">Hausa</option>
            <option value="Hawaiian">Hawaiian</option>
            <option value="Hebrew">Hebrew</option>
            <option value="Hindi">Hindi</option>
            <option value="Hungarian">Hungarian</option>
            <option value="Icelandic">Icelandic</option>
            <option value="Indonesian">Indonesian</option>
            <option value="Italian">Italian</option>
            <option value="Japanese">Japanese</option>
            <option value="Javanese">Javanese</option>
            <option value="Kannada">Kannada</option>
            <option value="Kazakh">Kazakh</option>
            <option value="Khmer">Khmer</option>
            <option value="Korean">Korean</option>
            <option value="Lao">Lao</option>
            <option value="Latin">Latin</option>
            <option value="Latvian">Latvian</option>
            <option value="Letzeburgesch">Letzeburgesch</option>
            <option value="Lingala">Lingala</option>
            <option value="Lithuanian">Lithuanian</option>
            <option value="Luxembourgish">Luxembourgish</option>
            <option value="Macedonian">Macedonian</option>
            <option value="Malagasy">Malagasy</option>
            <option value="Malay">Malay</option>
            <option value="Malayalam">Malayalam</option>
            <option value="Maltese">Maltese</option>
            <option value="Mandarin">Mandarin</option>
            <option value="Maori">Maori</option>
            <option value="Marathi">Marathi</option>
            <option value="Moldavian">Moldavian</option>
            <option value="Moldovan">Moldovan</option>
            <option value="Mongolian">Mongolian</option>
            <option value="Myanmar">Myanmar</option>
            <option value="Nepali">Nepali</option>
            <option value="Norwegian">Norwegian</option>
            <option value="Nynorsk">Nynorsk</option>
            <option value="Occitan">Occitan</option>
            <option value="Panjabi">Panjabi</option>
            <option value="Pashto">Pashto</option>
            <option value="Persian">Persian</option>
            <option value="Polish">Polish</option>
            <option value="Portuguese">Portuguese</option>
            <option value="Punjabi">Punjabi</option>
            <option value="Pushto">Pushto</option>
            <option value="Romanian">Romanian</option>
            <option value="Russian">Russian</option>
            <option value="Sanskrit">Sanskrit</option>
            <option value="Serbian">Serbian</option>
            <option value="Shona">Shona</option>
            <option value="Sindhi">Sindhi</option>
            <option value="Sinhala">Sinhala</option>
            <option value="Sinhalese">Sinhalese</option>
            <option value="Slovak">Slovak</option>
            <option value="Slovenian">Slovenian</option>
            <option value="Somali">Somali</option>
            <option value="Spanish">Spanish</option>
            <option value="Sundanese">Sundanese</option>
            <option value="Swahili">Swahili</option>
            <option value="Swedish">Swedish</option>
            <option value="Tagalog">Tagalog</option>
            <option value="Tajik">Tajik</option>
            <option value="Tamil">Tamil</option>
            <option value="Tatar">Tatar</option>
            <option value="Telugu">Telugu</option>
            <option value="Thai">Thai</option>
            <option value="Tibetan">Tibetan</option>
            <option value="Turkish">Turkish</option>
            <option value="Turkmen">Turkmen</option>
            <option value="Ukrainian">Ukrainian</option>
            <option value="Urdu">Urdu</option>
            <option value="Uzbek">Uzbek</option>
            <option value="Valencian">Valencian</option>
            <option value="Vietnamese">Vietnamese</option>
            <option value="Welsh">Welsh</option>
            <option value="Yiddish">Yiddish</option>
            <option value="Yoruba">Yoruba</option>
        </param>
        <param argument="--output_format" type="select" label="Output Format" multiple="true">
            <option value="txt" selected="true">Text</option>
            <option value="json">JSON</option>
            <option value="srt">SubRip</option>
            <option value="vtt">WebVTT</option>
            <option value="tsv">Tab-separated values</option>
        </param>
        <section name="advanced" title="Advanced Options">
            <param name="temperature" type="integer" help="temperature to use for sampling" optional="true" value="0" />
            <param name="best_of" type="integer" help="number of candidates when sampling with non-zero temperature" optional="true" value="5" />
            <param name="beam_size" type="integer" help="number of beams in beam search, only applicable when temperature is zero" optional="true" value="5" />
            <param name="patience" type="float" help="optional patience value to use in beam decoding, as in https://arxiv.org/abs/2204.05424, the default (1.0) is equivalent to conventional beam search" optional="true" value="" />
            <param name="length_penalty" type="float" help="optional token length penalty coefficient (alpha) as in https://arxiv.org/abs/1609.08144, uses simple length normalization by default" optional="true" value="" />
            <param name="suppress_tokens" type="integer" help="comma-separated list of token ids to suppress during sampling; -1 will suppress most special characters except common punctuations" optional="true" value="-1" />
            <param name="initial_prompt" type="text" help="optional text to provide as a prompt for the first window" optional="true" value="None" />
            <param name="condition_on_previous_text" type="boolean" help="if True, provide the previous output of the model as a prompt for the next window; disabling may make the text inconsistent across windows, but the model becomes less prone to getting stuck in a failure loop" truevalue="True" falsevalue="False" checked="true" optional="true" />
            <param name="temperature_increment_on_fallback" type="float" help="temperature to increase when falling back when the decoding fails to meet either of the thresholds below" optional="true" value="0.2" />
            <param name="compression_ratio_threshold" type="float" help="if the gzip compression ratio is higher than this value, treat the decoding as failed" optional="true" value="2.4" />
            <param name="logprob_threshold" type="float" help="if the average log probability is lower than this value, treat the decoding as failed" optional="true" value="-1.0" />
            <param name="no_speech_threshold" type="float" help="if the probability of the |nospeech| token is higher than this value AND the decoding has failed due to `logprob_threshold`, consider the segment as silence" optional="true" value="0.6" />
            <conditional name="word_timestamps">
                <param name="word_timestamps" type="select" label="Word Timestamps" help="(experimental) extract word-level timestamps and refine the results based on them">
                    <option value="False">False</option>
                    <option value="True">True</option>
                </param>
                <when value="True">      
                    <param name="highlight_words" type="boolean" truevalue="True" falsevalue="False" help="underline each word as it is spoken in srt and vtt" optional="true" value="False" /> 
                    <param name="max_line_width" type="integer" help="the maximum number of characters in a line before breaking the line" optional="true" value="" /> 
                    <param name="max_line_count" type="integer" help="the maximum number of lines in a segment" optional="true" value="" /> 
                    <param name="max_words_per_line" type="integer" help="no effect with --max_line_width. the maximum number of words in a segment" optional="true" value="" /> 
                </when>
                <when value="False">
                </when>
            </conditional>
        </section>
    </inputs>
    <outputs>
        <data name="output_txt" format="txt" from_work_dir="./outs/input.txt" label="${tool.name} on ${on_string}.txt">
            <filter>'txt' in output_format</filter>
        </data>
        <data name="output_json" format="json" from_work_dir="./outs/input.json" label="${tool.name} on ${on_string}.json">
            <filter>'json' in output_format</filter>
        </data>
        <data name="output_srt" format="txt" from_work_dir="./outs/input.srt" label="${tool.name} on ${on_string}.srt">
            <filter>'srt' in output_format</filter>
        </data>
        <data name="output_vtt" format="txt" from_work_dir="./outs/input.vtt" label="${tool.name} on ${on_string}.vtt">
            <filter>'vtt' in output_format</filter>
        </data>
        <data name="output_tsv" format="tabular" from_work_dir="./outs/input.tsv" label="${tool.name} on ${on_string}.tsv">
            <filter>'tsv' in output_format</filter>
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="infile" value="english.wav" ftype="wav"/>
            <param name="model" value="tiny"/>
            <param name="language" value="English"/>
            <param name="output_format" value="txt"/>
            <output name="output_txt" file="transcribe.txt"/>
        </test>
        <test expect_num_outputs="3">
            <param name="infile" value="english.wav" ftype="wav"/>
            <param name="model" value="tiny"/>
            <param name="language" value="English"/>
            <param name="output_format" value="srt,tsv,json"/>
            <output name="output_srt" file="transcribe_english.srt"/>
            <output name="output_tsv" file="transcribe_english.tsv"/>
            <output name="output_json" file="transcribe_english.json"/>
        </test>
        <test expect_num_outputs="1">
            <param name="infile" value="german.wav" ftype="wav"/>
            <param name="model" value="small"/>
            <param name="language" value="German"/>
            <param name="output_format" value="txt"/>
            <output name="output_txt" file="transcribe_german.txt"/>
        </test>
        <test expect_num_outputs="1">
            <param name="infile" value="german_english.mp3" ftype="mp3"/>
            <param name="model" value="medium"/>
            <param name="output_format" value="txt"/>
            <output name="output_txt" file="transcribe_german_english.txt"/>
        </test>
        <test expect_num_outputs="2">
            <param name="infile" value="persian.wav" ftype="wav"/>
            <param name="model" value="large"/>
            <param name="language" value="Persian"/>
            <param name="output_format" value="srt,json"/>
            <section name="advanced">
                <param name="condition_on_previous_text" value="False"/>
                <conditional name="word_timestamps">
                    <param name="word_timestamps" value="True"/>
                    <param name="max_words_per_line" value="5"/>
                </conditional>
            </section>
            <output name="output_json" file="transcribe_persian.srt"/>
            <output name="output_json" file="transcribe_persian.json"/>
        </test>
    </tests>
    <help><![CDATA[

.. class:: infomark

**What it does**

Transcribe audio or video files to text using the whisper from OpenAI.

Usage
.....


**Input**
Audio or video file to transcribe in one of wav, mp3, mkv, flv, mpg, ogg, wma, or mp4.


**Output**
Transcribed text in the selected format. The output can be in text, JSON, SubRip, WebVTT, or tab-separated values (tabular) format.
    ]]></help>
    <creator>
        <person givenName="Alireza" familyName="Heidari" url="http://github.com/itisalirh"/>
    </creator>
    <citations>
        <citation type="bibtex">
            @misc{openai2022whisper,
                title={Whisper},
                author={OpenAI},
                year={2022},
                url={https://github.com/openai/whisper}
            }
        </citation>
    </citations>
</tool>