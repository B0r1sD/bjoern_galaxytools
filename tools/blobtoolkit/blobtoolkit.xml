<tool id="blobtoolkit" name="BlobToolKit" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
    <description>genome assembly QC</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro='requirements' />
    <command detect_errors="exit_code"><![CDATA[
        #if $mode_conditional.selector == 'create'
            mkdir -p './Blobdir' &&
            mkdir -p './taxdump' &&
            ln -s '${mode_conditional.taxdump}' 'taxdump.tar' &&
            tar -xf 'taxdump.tar' -C './taxdump' &&
            ln -s '${mode_conditional.fasta}' 'assembly.fasta' &&
            #if $mode_conditional.meta
                ln -s '${mode_conditional.meta}' 'assembly.yaml' &&
            #end if
            blobtools create
            --fasta 'assembly.fasta'
            #if $mode_conditional.meta
                --meta 'assembly.yaml'
            #end if
            --taxid $mode_conditional.taxid
            --taxdump './taxdump'
            './Blobdir'
            && cp -r './taxdump' './Blobdir/'
            && tar -zcf './Blobdir.tgz' './Blobdir'
            && ls -lah

        #else if $mode_conditional.selector == 'add'
            tar -zxf '${mode_conditional.blobdir}' -C './' &&
            #if $mode_conditional.busco
                ln -s '${mode_conditional.busco}' './busco_results.tab' && 
            #end if
            #if $mode_conditional.blast_input.selector == 'enabled'
                ln -s '$mode_conditional.blast_input.hits' './blast_results.tab' &&
            #end if
            #if $mode_conditional.cov
                ln -s '$mode_conditional.cov' './input.bam' &&
                ln -s '$mode_conditional.cov.metadata.bam_index' './input.bam.bai' &&
            #end if
            #if $mode_conditional.bed
                    mkdir -p './bed_files' &&
                    #import re
                    #for $i, $input in enumerate($mode_conditional.bed):
                        #set $safename = re.sub('[^\w\-_]', '_', $input.element_identifier) + "." + str($i)
                        ln -sf '${input}' './bed_files/${safename}.bed' &&
                    #end for
            #end if
            blobtools add
                --threads \${GALAXY_SLOTS:-8}
                --taxdump './Blobdir/taxdump'
                #if $mode_conditional.busco
                    --busco './busco_results.tab'
                #end if
                #if $mode_conditional.blast_input.selector == 'enabled'
                    --hits './blast_results.tab'
                    #if $mode_conditional.blast_input.hits_cols
                        --hits-cols '${$mode_conditional.blast_input.hits_cols}'
                    #end if
                    --taxrule $mode_conditional.blast_input.taxrule
                    --evalue $mode_conditional.blast_input.evalue
                    --hit-count $mode_conditional.blast_input.hit_count
                    --bitscore $mode_conditional.blast_input.bitscore
                #end if
                #if $mode_conditional.bed
                    --beddir './bed_files'
                #end if
                #if $mode_conditional.cov
                    --cov './input.bam'
                #end if
                #if $mode_conditional.fasta
                    --fasta '${mode_conditional.fasta}'
                #end if
                #if $mode_conditional.trnascan
                    --fasta '${mode_conditional.trnascan}'
                #end if
                #if $mode_conditional.text_input.selector == 'enabled'
                    --text '${mode_conditional.text_input.text}'
                    --text-cols '${mode_conditional.text_input.text_cols}'
                    $mode_conditional.text_input.text_header
                    $mode_conditional.text_input.text_no_array
                    --text-delimiter $mode_conditional.text_input.text_delimiter
                #end if
                './Blobdir'
            && tar -zcf ./Blobdir.tgz ./Blobdir
            && ls -lah
 
        #else if $mode_conditional.selector == 'update'
            tar -zxf '${mode_conditional.blobdir}' -C './' &&
            blobtools replace
            #if $mode_conditional.key
                --key $mode_conditional.key
            #end if
            #if $mode_conditional.link
                --link $mode_conditional.link
            #end if
            ./Blobdir
            && tar -zcf ./Blobdir.tgz ./Blobdir

        #else if $mode_conditional.selector == 'filter'
            tar -zxf '${mode_conditional.blobdir}' -C './' &&
            blobtools filter
            #if $mode_conditional.param
                --param $mode_conditional.param
            #end if
            #if $mode_conditional.string
                --query-string $mode_conditional.string
            #end if
            #if $mode_conditional.json
                --json $mode_conditional.json
            #end if
            #if $mode_conditional.list
                --list $mode_conditional.list
            #end if
            #if $mode_conditional.invert
                --invert $mode_conditional.invert
            #end if
            #if $mode_conditional.output
                --output $mode_conditional.output
            #end if
            #if $mode_conditional.fasta
                --fasta $mode_conditional.fasta
            #end if
            #if $mode_conditional.fastq
                --fastq $mode_conditional.fastq
            #end if
            #if $mode_conditional.text
                --text $mode_conditional.text
            #end if
            #if $mode_conditional.suffix
                --suffix $mode_conditional.suffix
            #end if
            #if $mode_conditional.summary
                --summary $mode_conditional.summary
            #end if
            #if $mode_conditional.table
                --table $mode_conditional.table
            #end if
            ./Blobdir
            && tar -zcf ./Blobdir.tgz ./Blobdir

        #else if $mode_conditional.selector == 'plots'
            mkdir -p './Blobdir' &&
            tar -zxf '${mode_conditional.blobdir}' -C './Blobdir' &&
            blobtools view
            #if $mode_conditional.format
                --format $mode_conditional.format
            #end if
            #if $mode_conditional.interactive
                --interactive
            #end if
            #if $mode_conditional.out
                --out $mode_conditional.out
            #end if
            #if $mode_conditional.param
                --param $mode_conditional.param
            #end if
            #if $mode_conditional.ports
                --ports $mode_conditional.ports
            #end if
            #if $mode_conditional.prefix
                --prefix $mode_conditional.prefix
            #end if
            #if $mode_conditional.preview
                --preview $mode_conditional.preview
            #end if
            #if $mode_conditional.driver
                --driver $mode_conditional.driver
            #end if
            #if $mode_conditional.driverlog
                --driverlog $mode_conditional.driverlog
            #end if
            #if $mode_conditional.local
                --local
            #end if
            #if $mode_conditional.remote
                --remote
            #end if
            #if $mode_conditional.timeout
                --timeout $mode_conditional.timeout
            #end if
            #if $mode_conditional.view
                --view $mode_conditional.view
            #end if
            #if $mode_conditional.host
                --host $mode_conditional.host
            #end if
            ./Blobdir
            && tar -zcf ./Blobdir.tgz ./Blobdir
        #end if
        && ls -lah ./Blobdir
        && ls -lah
    ]]></command>
    <inputs>
        <conditional name="mode_conditional">
            <param name="selector" type="select" label="Select mode" help="Select a BlobToolKit module">
                <option value="create">Create a BlobToolKit dataset</option>
                <option value="add">Add data to a BlobToolKit dataset</option>
                <option value="update">Update metadata</option>
                <option value="filter">Filter a BlobToolKit dataset</option>
                <option value="plots">Generate plots</option>
            </param>
            <when value="create">
                <param argument="--fasta" type="data" format="fasta" label="Genome assembly file" help="FASTA sequence file" />
                <param argument="--meta" type="data" format="yaml" label="Metadata file" optional="true" help="Optional metadata dataset"/>
                <param argument="--taxid" type="integer" value="" label="NCBI taxonomy ID" help="Add ranks to metadata for a taxid"/>
                <param argument="--taxdump" type="data" format="tar,tgz,gz" label="NCBI taxdump directory" help="It should be compressed in tar.gz format"/>
            </when>
            <when value="add">
                <param name="blobdir" type="data" format="tgz" label="Blobdir.tgz file" help="This file should be generated by Blobtool create" />
                <param argument="--busco" type="data" format="tsv,tabular,txt" optional="true" label="BUSCO full table file"/>
                <conditional name="blast_input">
                    <param name="selector" type="select" label="BLAST/Diamond hits">
                        <option value="enabled">Enabled</option>
                        <option value="disabled" selected="true">Disabled</option>
                    </param>
                    <when value="enabled">
                        <param argument="--hits" type="data" format="tsv,tabular" optional="true" label="BLAST/Diamond hits dataset" help="Tabular BLAST/Diamond output file"/>
                        <param argument="--taxrule" type="select" label="BLAST hits to taxa rule" help="Rule to use when assigning BLAST hits to taxa">
                            <option value="bestsum">Bestsum</option>
                            <option value="bestsumorder">Bestsumorder</option>
                            <option value="bestdistsum">Bestdistsum</option>
                            <option value="bestdistsumorder">Bestdistsumorder</option>
                            <option value="blastp">Blastp</option>
                        </param>              
                        <param argument="--evalue" type="float" min="0" value="1" label="E-value cutoff"
                            help="The smaller the E-value, the better the match. Any hits with an evalue weaker than the value specified will be excluded"/>
                        <param argument="--bitscore" type="float" min="0" value="1" label="Bitscore cutoff" 
                            help="The higher the bit-score, the better the sequence similarity. Any hits with an bitscore lower the value specified will be excluded"/>
                        <param argument="--hit-count" type="integer" min="1" value="10" label="Hits to a given taxon" optional="true" 
                            help="By default the 10 highest scoring hits to a given taxon will be used when applying the --taxrule"/>
                        <param argument="--hits-cols" type="text" value="1=qseqid,2=staxids,3=bitscore,5=sseqid,10=qstart,11=qend,14=evalue" optional="true" 
                            label="BLAST/Diamond file column order" help="More information in the help section">
                            <sanitizer invalid_char="">
                                <valid initial="string.letters,string.digits">
                                    <add value="=" />
                                    <add value="," />
                                </valid>
                            </sanitizer>
                            <validator type="regex">[0-9a-z=,]+</validator>
                        </param>
                    </when>
                    <when value="disabled"/>
                </conditional>
                <param argument="--bed" type="data" format="bed" multiple="true" optional="true" label="BED file of coverages per scaffold"/>
                <param argument="--cov" type="data" format="bam,sam,cram" optional="true" label="BAM/SAM/CRAM read alignment file"/>
                <param argument="--fasta" type="data" format="fasta" optional="true" label="FASTA sequence" help="FASTA sequence file" />
                <param argument="--trnascan" type="data" format="tsv" optional="true" label="tRNAscan2-SE" help="tRNAscan-SE is employed for identifying and annotating tRNA genes in genomes"/>
                <conditional name="text_input">
                    <param name="selector" type="select" label="Genetic text file" help="Include a genetic text file as input">
                        <option value="enabled">Enabled</option>
                        <option value="disabled" selected="true">Disabled</option>
                    </param>
                    <when value="enabled">
                        <param argument="--text" type="data" format="txt" label="Specify text file" help="it is possible to specify =FIELDNAME after the filename to load all specified columns into a single array 
                            or multiarray type field, with multiple values (or multiple sets of values) per identifier"/>
                        <param argument="--text-cols" type="text" value="" label="Column specification" help="Example: 1=identifiers,2,3=score,total=total_score">
                            <sanitizer invalid_char="">
                                <valid initial="string.letters,string.digits">
                                    <add value="_" />
                                    <add value="," />
                                    <add value="=" />
                                    <add value="-" />
                                </valid>
                            </sanitizer>
                            <validator type="regex">[0-9a-zA-Z=,_-]+</validator>
                        </param>
                        <param argument="--text-header" type="boolean" truevalue="--text-header" falsevalue="" checked="false" label="Text has header row" help="Set the flag if a text file contains a header row" />
                        <param argument="--text-no-array" type="boolean" truevalue="--text-no-array" falsevalue="" checked="false" label="Prevent duplicated identifiers" 
                            help="Prevent fields in files with duplicate identifiers being loaded as array fields" />
                        <param argument="--text-delimiter" type="select" label="Text delimiter" help="Character used as delimiter in the text file">
                            <option value="comma">Comma</option>
                            <option value="tabular">Tabulation</option>
                            <option value="whitespace">Whitespace</option>
                        </param>
                    </when>
                    <when value="disabled"/>
                </conditional>
                <section name="advanced_options" title="Advanced options">
                    <param argument="--blobdb" type="data" format="json" optional="true" label="Blobtools v1 database" help="This file should have been generated with the previous Blobtools tool version"/>
                    <param argument="--synonyms" type="data" format="tsv" optional="true" label="Identifier and sinonyms" help="TSV file containing current identifiers and synonyms"/>
                    <param argument="--update-plot" type="boolean" value="false" optional="true" label="Update plot" help="Flag to use new taxrule as default category."/>
                    <param argument="--pileup-args" type="text" optional="true" label="Samtools Pileup" help="Key/value pairs to pass to samtools pileup."/> 
                    <param argument="--replace" type="boolean" default_value="false" label="Allow existing fields to be overwritten" optional="true" help="Allow existing fields to be overwritten, set the --replace flag"/>
                </section>
            </when>
            <when value="update">
                <param name="blobdir" type="data" format="tgz" label="Blobdir file" help="This file should be generated by the moudule create" />
                <param argument="--key" type="text" optional="true" label="Updating assembly/taxon information/default plot axes" help="Any values in the BlobDir dataset metadata can be updated by specifying --key path=value. In this context, path is a .-separated hierarchy of keys, e.g. assembly.accession"/>
                <param argument="--link" type="text" optional="true" label="Adding links to external resources" help="When added to the dataset, the link title is set using the last key in the path"/>
            </when>
            <when value="filter">
                <param name="blobdir" type="data" format="tgz" label="Blobdir file" help="This file should be generated by the moudule create" />
                <param argument="--param" type="text" optional="true" label="Param" help="Individual param=value pairs can be specified to filter based on Variable or Category fields."/>
                <param name="string" argument="--query-string" optional="true" type="text" label="URL query-string format (param1=valueANDparam2=value). " help="For convenience a complete URL can be copied from the browser address bar during an interactive Viewer session and pasted as a --query-string to reproduce the session on the command line."/>
                <param argument="--json" type="text" optional="true" label="Json" help="To reproduce an interactive selection on the command line, it is necessary to export the current selection from the viewer as a list"/>
                <param argument="--list" type="text" optional="true" label="List" help="Text file containing a space or newline separated list of identifiers"/>
                <param argument="--invert" type="text" optional="true" label="Invert" help="Flag to invert the filter (exclude matching records)"/>
                <param argument="--output" type="text" optional="true" label="Output" help="Path to directory to save a filtered copy of the BlobDir"/>
                <param argument="--fasta" type="text" optional="true" label="FASTA" help="FASTA format assembly file to be filtered"/>
                <param argument="--fastq" type="text" optional="true" label="FASTQ" help="FASTQ format read file to be filtered (requires --cov)"/>
                <param argument="--text" type="text" optional="true" label="Text" help="Generic text file to be filtered."/>
                <param argument="--suffix" type="text" optional="true" label="Suffix" help="STRING String to be added to filtered filename"/>
                <param argument="--summary" type="text" optional="true" label="Summary" help="Filename for a JSON-format summary of the filtered dataset."/>
                <param argument="--table" type="text" optional="true" label="Table" help="Filename for a tabular output of filtered dataset."/>
            </when>
            <when value="plots">
                <param argument="--format" type="text" optional="true" label="Image format" help="Image format (svg|png). [Default: png]"/>
                <param argument="--interactive" type="boolean" default_value="false" optional="true" label="Interactive Session" help="Start interactive session (opens dataset in Firefox/Chromium). [Default: False]"/>
                <param argument="--out" type="text" optional="true" default_value=" ." label="Outfiles" help="Directory for outfiles. [Default: .]"/>
                <param argument="--param" type="text" optional="true" label="Query parameter." help="Query string parameter."/>
                <param argument="--ports" type="integer" optional="true" label="Port range" help="Port range for viewer and API. [Default: 8000-8099]"/>
                <param argument="--prefix" type="text" optional="true" label="URL prefix" help="URL prefix. [Default: view]"/>
                <param argument="--preview" type="text" optional="true" label="Field name" help="Field name"/>
                <param argument="--driver" type="text" optional="true" label="Webdriver" help="Webdriver to use (chromium or firefox). [Default: firefox]"/>
                <param name="driverlog" argument="--driver-log" type="text" optional="true" label="Logfile Path" help="Path to driver logfile for debugging. [Default: /dev/null]"/>
                <param argument="--local" type="boolean" optional="true" label="Local session" help="Start viewer for local session. [Default: False]"/>
                <param argument="--remote" type="boolean" optional="true" label="Remote Session" help="Start viewer for remote session. [Default: False]"/>
                <param argument="--timeout" type="integer" optional="true" label="Timeout" help="Time to wait for page load in seconds. Default (0) is no timeout. [Default: 0]"/>
                <param argument="--view" type="text" optional="true" label="Plot Type" help="Plot type (blob|cumulative|snail). [Default: blob]"/>
                <param argument="--host" type="text" optional="true" label="Hostname" help="Hostname. [Default: http://localhost]"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="blobdir_create" format="tgz" from_work_dir="./Blobdir.tgz" label="${tool.name} on ${on_string}: Blobdir.tgz">
            <filter>mode_conditional['selector'] == 'create'</filter>
        </data>
        <data name="blobdir_add" format="tgz" from_work_dir="./Blobdir.tgz" label="${tool.name} on ${on_string}: Blobdir.tgz">
            <filter>mode_conditional['selector'] == 'add'</filter>
        </data>
        <data name="blobdir_update" format="tgz" from_work_dir="./Blobdir.tgz" label="${tool.name} on ${on_string}: Blobdir.tgz">
            <filter>mode_conditional['selector'] == 'update'</filter>
        </data>
        <data name="blobdir_filter" format="tgz" from_work_dir="./Blobdir.tgz" label="${tool.name} on ${on_string}: Blobdir.tgz">
            <filter>mode_conditional['selector'] == 'filter'</filter>
        </data>
        <data name="blobdir_plots" format="tgz" from_work_dir="./Blobdir.tgz" label="${tool.name} on ${on_string}: Blobdir.tgz">
            <filter>mode_conditional['selector'] == 'plots'</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <param name="fasta" value="assembly.fasta"/>
            <param name="meta" value="assembly.yaml"/>
            <param name="taxid" value=""/>
            <param name="taxdump" value="taxdump.tar.gz"/>
            <!--output name="identifiers" file="identifiers.json"/-->
            <output name="blobdir_create" file="length.json, gc.json, identifiers.json, meta.json, ncount.json"/>
        </test>
    </tests>
    <help><![CDATA[
    BlobToolKit is a software suite to aid researchers in identifying and isolating non-target data in draft and publicly available genome assemblies. It can be used to process assembly, 
    read and analysis files for fully reproducible interactive exploration in the browser-based Viewer. BlobToolKit can be used during assembly to filter non-target DNA, helping researchers produce assemblies with high biological credibility.
    ]]></help>
    <expand macro="citations"/>
</tool>