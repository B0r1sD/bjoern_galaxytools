<tool id="blobtoolkit" name="BlobToolKit" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
    <description>genome assembly QC</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro='requirements' />
    <command detect_errors="exit_code"><![CDATA[
        #if $mode_conditional.selector == 'create'
            #if $mode_conditional.id_conditional.selector == 'enabled'
                mkdir -p './taxdump' &&
                ln -s '${mode_conditional.id_conditional.taxdump}' 'taxdump.tar' &&
                tar -xf 'taxdump.tar' -C './taxdump' &&
            #end if
            ln -s '${mode_conditional.fasta}' 'assembly.fasta' &&
            #if $mode_conditional.meta
                ln -s '${mode_conditional.meta}' 'assembly.yaml' &&
            #end if
            blobtools create 
            --fasta 'assembly.fasta'
            #if $mode_conditional.meta
                --meta 'assembly.yaml'
            #end if
            #if $mode_conditional.id_conditional.selector == 'enabled'
                --taxid $mode_conditional.id_conditional.taxid
                --taxdump './taxdump'
            #end if
            ./Blobdir
            && tar -zcf ./Blobdir.tgz ./Blobdir
        #else if $mode_conditional.selector == 'add'
            mkdir -b './Blobdir' &&
            tar -zxf '${mode_conditional.blobdir}' -C './Blobdir' &&
            #if $mode_conditional.bed
                mkdir -p './bed_files' &&
                #import re
                #for $i, $input in enumerate($mode_conditional.bed):
                    #set $safename = re.sub('[^\w\-_]', '_', $input.element_identifier) + "." + str($i)
                    ln -sf '${input}' './bed_files/${safename}.bed' &&
                #end for
            #end if
            #if $mode_conditional.cov
                #set $extension = '${$mode_conditional.cov.ext}'
                ln -s '${mode_conditional.cov}' 'alignment.${extension}'
            #end if
            blotools add
            #if $mode_conditional.bed
                --beddir './bed_files'
            #end if
            #if $mode_conditional.busco
                --busco '${mode_conditional.busco}'
            #end if
            #if $mode_conditional.cov
                --cov 'alignment.${extension}'
            #end if
        #end if
        && ls -lah ./Blobdir
        && ls -lah
    ]]></command>
    <inputs>
        <conditional name="mode_conditional">
            <param name="selector" type="select" label="Select mode" help="Select a BlobToolKit module">
                <option value="create">Create a BlobToolKit dataset</option>
                <option value="add">Add data to a BlobToolKit dataset</option>
                <option value="update">Update metadata</option>
                <option value="filter">Filter a BlobToolKit dataset</option>
                <option value="plots">Generate plots</option>
            </param>
            <when value="create">
                <param argument="--fasta" type="data" format="fasta" label="Genome assembly file" help="FASTA sequence file" />
                <param argument="--meta" type="data" format="yaml" label="Metadata file" optional="true" help="Optional metadata dataset"/>
                <conditional name="id_conditional">
                    <param name="selector" type="select" label="Taxon ID" help="Add ranks to metadata for a taxid">
                        <option value="disabled">Disabled</option>
                        <option value="enabled">Enabled</option>
                    </param>
                    <when value="disabled"/>
                    <when value="enabled">
                        <param argument="--taxid" type="integer" value="" label="NCBI taxonomy ID" help="Add ranks to metadata for a taxid"/>
                        <param argument="--taxdump" type="data" format="tar,tgz,gz" label="NCBI taxdump directory" help="It should be compressed in tar.gz format"/>
                    </when>
                </conditional>
            </when>
            <when value="add">
                <param name="blobdir" type="data" format="tgz" label="Blobdir file" help="This file should be generated by the moudule create" />
                <param argument="--bed" type="data" format="bed" multiple="true" optional="true" label="BED format file/s"/>
                <param argument="--busco" type="data" format="tsv,tabular" optional="true" label="BUSCO full table file"/>
                <param argument="--cov" type="data" format="bam,sam,cram" label="BAM/SAM/CRAM read alignment file"/>
                <param argument="--hits" type="data" format="tsv" label="Tabular BLAST/Diamond output file"/>
            </when>
            <when value="update">
            </when>
            <when value="filter">
            </when>
            <when value="plots">
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="blobdir" format="tgz" from_work_dir="./Blobdir.tgz" label="${tool.name} on ${on_string}: Blobdir.tgz">
            <filter>mode_conditional['selector'] == 'create'</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <param name="fasta" value="sample1.fasta"/>
            <!--output name="identifiers" file="identifiers.json"/-->
            <output name="length" file="length.json"/>
            <output name="meta" file="meta.json"/>
            <output name="ncount" file="ncount.json"/>
            <output name="gc" file="gc.json"/>
        </test>
    </tests>
    <help><![CDATA[
    BlobToolKit is a software suite to aid researchers in identifying and isolating non-target data in draft and publicly available genome assemblies. It can be used to process assembly, 
    read and analysis files for fully reproducible interactive exploration in the browser-based Viewer. BlobToolKit can be used during assembly to filter non-target DNA, helping researchers produce assemblies with high biological credibility.
    ]]></help>
</tool>