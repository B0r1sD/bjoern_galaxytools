<tool id="blobtoolkit" name="BlobToolKit" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
    <description>genome assembly QC</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro='requirements' />
    <command detect_errors="exit_code"><![CDATA[
        #if $mode_conditional.selector == 'create'
            #if $mode_conditional.id_conditional.selector == 'enabled'
                mkdir -p './taxdump' &&
                ln -s '${mode_conditional.id_conditional.taxdump}' 'taxdump.tar' &&
                tar -xf 'taxdump.tar' -C './taxdump' &&
            #end if
            ln -s '${mode_conditional.fasta}' 'assembly.fasta' &&
            #if $mode_conditional.meta
                ln -s '${mode_conditional.meta}' 'assembly.yaml' &&
            #end if
            blobtools create 
            --fasta 'assembly.fasta'
            #if $mode_conditional.meta
                --meta 'assembly.yaml'
            #end if
            #if $mode_conditional.id_conditional.selector == 'enabled'
                --taxid $mode_conditional.id_conditional.taxid
                --taxdump './taxdump'
            #end if
            ./Blobdir
            && tar -zcf ./Blobdir.tgz ./Blobdir


        #else if $mode_conditional.selector == 'add'
            mkdir -b './Blobdir' &&
            tar -zxf '${mode_conditional.blobdir}' -C './Blobdir' &&
            blobtools add

            #if $mode_conditional.add.bed
                mkdir -p './bed_files' &&
                #import re
                #for $i, $input in enumerate($mode_conditional.add.bed):
                    #set $safename = re.sub('[^\w\-_]', '_', $input.element_identifier) + "." + str($i)
                    ln -sf '${input}' './bed_files/${safename}.bed' &&
                #end for
                --beddir './bed_files'
            #end if

            #if $mode_conditional.add.bedtsv
                ln -s '$mode_conditional.add.bedtsv' 'bed.tsv' &&
                --bedtsv 'bed.tsv'
            #end if

            #if $mode_conditional.add.blobdb
                ln -s '$mode_conditional.add.blobdb' 'blobdb.json' &&
                --blobdb 'blobdb.json'
            #end if

            #if $mode_conditional.add.synonyms
                ln -s '$mode_conditional.add.synonyms' 'synonyms.tsv' &&
                --synonyms 'synonyms.tsv'
            #end if

            #if $mode_conditional.add.create
                --create
                ./NewBlobDir
            #end if

            #if $mode_conditional.add.skiplinktest
                --skip-link-test
            #end if

            #if $mode_conditional.add.trnascan
                ln -s '$mode_conditional.add.trnascan' 'trnascan.tsv' &&
                --trnascan 'trnascan.tsv'
            #end if

            #if $mode_conditional.add.updateplot
                --update-plot
            #end if

            #if $mode_conditional.add.pileupargs
                --pileup-args $mode_conditional.add.pileupargs
            #end if
            ./Blobdir
            && tar -zcf ./Blobdir.tgz ./Blobdir

            #if $mode_conditional.add_conditional.selector == 'hits'
                mkdir -p './taxdump' &&
                ln -s '${mode_conditional.add_conditional.hits.taxdump}' 'taxdump.tar' &&
                tar -xf 'taxdump.tar' -C './taxdump' &&
                ln -s '${mode_conditional.add_conditional.hits}' 'hits.tsv' &&
                blobtools add
                --hits 'hits.tsv'
                --taxdump './taxdump'
                #if $mode_conditional.add_conditional.hits.hitscols
                    --hits-cols $mode_conditional.add_conditional.hits.hitscols
                #end if
                #if $mode_conditional.add_conditional.hits.taxrule
                    --taxrule $mode_conditional.add_conditional.hits.taxrule
                #end if
                #if $mode_conditional.add_conditional.hits.evalue
                    --evalue $mode_conditional.add_conditional.hits.evalue
                #end if
                #if $mode_conditional.add_conditional.hits.bitscore
                    --bitscore $mode_conditional.add_conditional.hits.bitscore
                #end if
                #if $mode_conditional.add_conditional.hits.hitcount
                    --hit-count $mode_conditional.add_conditional.hits.hitcount
                #end if
                #if $mode_conditional.add_conditional.hits.replace
                    --replace
                #end if
            #end if
            ./Blobdir
            && tar -zcf ./Blobdir.tgz ./Blobdir

            #if $mode_conditional.add_conditional.selector == 'coverage'
                blobtools add
                --cov $mode_conditional.add_conditional.coverage.cov
                #if $mode_conditional.add_conditional.coverage.threads
                    --threads $mode_conditional.add_conditional.coverage.threads
                #end if
                #if $mode_conditional.add_conditional.coverage.replace
                    --replace
                #end if
            #end if
            ./Blobdir
            && tar -zcf ./Blobdir.tgz ./Blobdir

            #if $mode_conditional.add_conditional.selector == 'BUSCO'
                blobtools add
                --busco $mode_conditional.add_conditional.BUSCO.busco
                #if $mode_conditional.add_conditional.BUSCO.replace
                    --replace
                #end if
            #end if
            ./Blobdir
            && tar -zcf ./Blobdir.tgz ./Blobdir

            #if $mode_conditional.add_conditional.selector == 'textfiles'
                blobtools add
                --text $mode_conditional.add_conditional.textfiles.text
                --text-cols $mode_conditional.add_conditional.textfiles.cols
                #if $mode_conditional.add_conditional.textfiles.delimiter
                    --delimiter $mode_conditional.add_conditional.textfiles.delimiter
                #end if
                #if $mode_conditional.add_conditional.textfiles.header
                    --text-header
                #end if
                #if $mode_conditional.add_conditional.textfiles.noarray
                    --text-no-array
                #end if
                #if $mode_conditional.add_conditional.textfiles.replace
                    --replace
                #end if
            #end if
            ./Blobdir
            && tar -zcf ./Blobdir.tgz ./Blobdir

        #else if $mode_conditional.selector == 'update'
            mkdir -b './Blobdir' &&
            tar -zxf '${mode_conditional.blobdir}' -C './Blobdir' &&
            blobtools replace
            #if $mode_conditional.update.key
                --key $mode_conditional.update.key
            #end if
            #if $mode_conditional.update.link
                --link $mode_conditional.update.link
            #end if
            ./Blobdir
            && tar -zcf ./Blobdir.tgz ./Blobdir

        #else if $mode_conditional.selector == 'filter'
            mkdir -b './Blobdir' &&
            tar -zxf '${mode_conditional.blobdir}' -C './Blobdir' &&
            blobtools filter
            #if $mode_conditional.filter.param
                --param $mode_conditional.filter.param
            #end if
            #if $mode_conditional.filter.string
                --query-string $mode_conditional.filter.string
            #end if
            #if $mode_conditional.filter.json
                --json $mode_conditional.filter.json
            #end if
            #if $mode_conditional.filter.list
                --list $mode_conditional.filter.list
            #end if
            #if $mode_conditional.filter.invert
                --invert $mode_conditional.filter.invert
            #end if
            #if $mode_conditional.filter.output
                --output $mode_conditional.filter.output
            #end if
            #if $mode_conditional.filter.fasta
                --fasta $mode_conditional.filter.fasta
            #end if
            #if $mode_conditional.filter.fastq
                --fastq $mode_conditional.filter.fastq
            #end if
            #if $mode_conditional.filter.text
                --text $mode_conditional.filter.text
            #end if
            #if $mode_conditional.filter.suffix
                --suffix $mode_conditional.filter.suffix
            #end if
            #if $mode_conditional.filter.summary
                --summary $mode_conditional.filter.summary
            #end if
            #if $mode_conditional.filter.table
                --table $mode_conditional.filter.table
            #end if
            ./Blobdir
            && tar -zcf ./Blobdir.tgz ./Blobdir
        #end if
        && ls -lah ./Blobdir
        && ls -lah
    ]]></command>
    <inputs>
        <conditional name="mode_conditional">
            <param name="selector" type="select" label="Select mode" help="Select a BlobToolKit module">
                <option value="create">Create a BlobToolKit dataset</option>
                <option value="add">Add data to a BlobToolKit dataset</option>
                <option value="update">Update metadata</option>
                <option value="filter">Filter a BlobToolKit dataset</option>
                <option value="plots">Generate plots</option>
            </param>
            <when value="create">
                <param argument="--fasta" type="data" format="fasta" label="Genome assembly file" help="FASTA sequence file" />
                <param argument="--meta" type="data" format="yaml" label="Metadata file" optional="true" help="Optional metadata dataset"/>
                <conditional name="id_conditional">
                    <param name="selector" type="select" label="Taxon ID" help="Add ranks to metadata for a taxid">
                        <option value="disabled">Disabled</option>
                        <option value="enabled">Enabled</option>
                    </param>
                    <when value="disabled"/>
                    <when value="enabled">
                        <param argument="--taxid" type="integer" value="" label="NCBI taxonomy ID" help="Add ranks to metadata for a taxid"/>
                        <param argument="--taxdump" type="data" format="tar,tgz,gz" label="NCBI taxdump directory" help="It should be compressed in tar.gz format"/>
                    </when>
                </conditional>
            </when>
            <when value="add">
                <section name="space" title="############################"/>
                <section name="Standard" title="Options without a Catagory"/>
                <section name="space1" title="############################"/>
                <param name="blobdir" type="data" format="tgz" label="Blobdir file" help="This file should be generated by the moudule create" />
                <param argument="--bed" type="data" format="bed" multiple="true" optional="true" label="BED format file/s"/>
                <param argument="--bedtsv" type="data" format="tsv" optional="true" label="BED Format - TSV" help="TSV file with header row and bed-format columns 1-3"/>
                <param argument="--blobdb" type="data" format="json" optional="true" label="BlobDB - Json File" help="blobtools v1 db"/>
                <param argument="--synonyms" type="data" format="tsv" optional="true" label="Synonyms - TSV File" help="TSV file containing current identifiers and synonyms"/>
                <param argument="--create" type="boolean" default_value="false" optional="true" label="Create new BlobDir" help="Creates a new dataset directory"/>
                <param name="skiplinktest" argument="--skip-link-test" type="boolean" default_value="false" optional="true" label="Skip test" help="Skip test to see if link URL can be resolved."/>
                <param argument="--trnascan" type="data" format="tsv" optional="true" label="tRNAscan2-SE output" help="tRNAscan2-SE output"/>
                <param name="updateplot" argument="--update-plot" type="boolean" default_value="false" optional="true" label="Update Plot" help="Flag to use new taxrule as default category."/>
                <param name="pileupargs" argument="--pileup-args" type="text" optional="true" label="Samtools Pileup" help="Key/value pairs to pass to samtools pileup."/>               
                <section name="space2" title="############################"/>
                <section name="Conditional" title="Select between 'add' options"/>
                <section name="space3" title="############################"/>
                <conditional name="add_conditional">
                    <param name="selector" type="select" label="Adding options" help="choose what you want to add to your dataset">
                        <option value="hits">Add hits to dataset</option>
                        <option value="coverage">Add coverage to dataset</option>
                        <option value="BUSCO">Add BUSCO to dataset</option>
                        <option value="textfiles">Add textfiles to dataset</option>
                    </param>
                    <when value="hits">
                        <param argument="--hits" type="data" format="tsv" label="Tabular BLAST/Diamond output file"/>
                        <param argument="--taxdump" type="data" format="tar,tgz,gz" label="NCBI taxdump directory" help="It should be compressed in tar.gz format"/>
                        <param name="hitscols" argument="--hits-cols" type="text" label="Tablular BLAST output files with a different column order can be imported by specifying a comma separated list of 'column_number=field_name'" optional="true" help="--hits-cols 1=qseqid,2=staxids,3=bitscore,5=sseqid,10=qstart,11=qend,14=evalue"/>
                        <param argument="--taxrule" type="text" label="Determines the rule to use when assigning BLAST hits to taxa" default_value="bestsumorder" optional="true" help="Available options: bestsum, bestsumorder, bestdistsum, bestdistsumorder, blastp"/>
                        <param argument="--evalue" type="float" default_value="1" label="Filter based on an evalue cutoff" optional="true" help="Any hits with an evalue weaker than the value specified will be excluded. (--evalue 1e-50)"/>
                        <param argument="--bitscore" type="float" label="Filter based on a bitscore cutoff" optional="true" help="Any hits with an bitscore lower the value specified will be excluded."/>
                        <param name="hitcount" argument="--hit-count" type="integer" label="Hits to a given taxon" optional="true" help="By default the 10 highest scoring hits to a given taxon will be used when applying the --taxrule"/>
                        <param argument="--replace" type="boolean" default_value="false" label="Allow existing fields to be overwritten" optional="true" help="Allow existing fields to be overwritten, set the --replace flag"/>
                    </when>
                    <when value="coverage">
                        <param argument="--cov" type="data" format="bam,sam,cram" label="BAM/SAM/CRAM read alignment file"/>
                        <param argument="--threads" type="integer" label="Threads" optional="true" help="To use more than one thread, set --threads to an appropriate value."/>
                        <param argument="--replace" type="boolean" default_value="false" label="Allow existing fields to be overwritten" optional="true" help="Allow existing fields to be overwritten, set the --replace flag"/>
                    </when>
                    <when value="BUSCO">
                        <param argument="--busco" type="data" format="tsv,tabular" label="BUSCO full table file"/>
                        <param argument="--replace" type="boolean" default_value="false" label="Allow existing fields to be overwritten" optional="true" help="Allow existing fields to be overwritten, set the --replace flag"/>
                    </when>
                    <when value="textfiles">
                        <param argument="--text" type="data" format="txt" label="Specify text file" help="it is possible to specify =FIELDNAME after the filename to load all specified columns into a single array or multiarray type field, with multiple values (or multiple sets of values) per identifier"/>
                        <param argument="--delimiter" type="text" default_value=" " label="Splits rows on any delimiters" optional="true" help="Alternative delimiters can use Python regular expression syntax, e.g. use --delimiter '\t' for tab delimited files."/>
                        <param name="cols" argument="--text-cols" type="text" label="Column specification" help="Example: --text-cols 1=identifiers,2,3=score,total=total_score"/>
                        <param name="header" argument="--text-header" type="boolean" default_value="false" label="Header row" optional="true" help="Set the --text-header flag if a text file contains a header row"/>
                        <param name="noarray" argument="--text-no-array" type="boolean" default_value="false" label="Used when a text file is not expected to contain duplicate identifiers" optional="true" help="revent files with duplicated identifiers being loaded as array fields"/>
                        <param argument="--replace" type="boolean" default_value="false" label="Allow existing fields to be overwritten" optional="true" help="Allow existing fields to be overwritten, set the --replace flag"/>
                    </when>
                </conditional>
            </when>
            <when value="update">
                <param name="blobdir" type="data" format="tgz" label="Blobdir file" help="This file should be generated by the moudule create" />
                <param argument="--key" type="text" label="Updating assembly/taxon information/default plot axes" help="Any values in the BlobDir dataset metadata can be updated by specifying --key path=value. In this context, path is a .-separated hierarchy of keys, e.g. assembly.accession"/>
                <param argument="--link" type="text" label="Adding links to external resources" help="When added to the dataset, the link title is set using the last key in the path"/>
            </when>
            <when value="filter">
                <param name="blobdir" type="data" format="tgz" label="Blobdir file" help="This file should be generated by the moudule create" />
                <param argument="--param" type="text" label="Param" help="Individual param=value pairs can be specified to filter based on Variable or Category fields."/>
                <param name="string" argument="--query-string" type="text" label="URL query-string format (param1=valueANDparam2=value). " help="For convenience a complete URL can be copied from the browser address bar during an interactive Viewer session and pasted as a --query-string to reproduce the session on the command line."/>
                <param argument="--json" type="text" label="Json" help="To reproduce an interactive selection on the command line, it is necessary to export the current selection from the viewer as a list"/>
                <param argument="--list" type="text" label="List" help="Text file containing a space or newline separated list of identifiers"/>
                <param argument="--invert" type="text" label="Invert" help="Flag to invert the filter (exclude matching records)"/>
                <param argument="--output" type="text" label="Output" help="Path to directory to save a filtered copy of the BlobDir"/>
                <param argument="--fasta" type="text" label="FASTA" help="FASTA format assembly file to be filtered"/>
                <param argument="--fastq" type="text" label="FASTQ" help="FASTQ format read file to be filtered (requires --cov)"/>
                <param argument="--text" type="text" label="Text" help="Generic text file to be filtered."/>
                <param argument="--suffix" type="text" label="Suffix" help="STRING String to be added to filtered filename"/>
                <param argument="--summary" type="text" label="Summary" help="Filename for a JSON-format summary of the filtered dataset."/>
                <param argument="--table" type="text" label="Table" help="Filename for a tabular output of filtered dataset."/>
            </when>
            <when value="plots">
                <param argument="--format" type="text" optional="true" label="Image format" help="Image format (svg|png). [Default: png]"/>
                <param argument="--interactive" type="boolean" default_value="false" optional="true" label="Interactive Session" help="Start interactive session (opens dataset in Firefox/Chromium). [Default: False]"/>
                <param argument="--out" type="text" optional="true" default_value=" ." label="Outfiles" help="Directory for outfiles. [Default: .]"/>
                <param argument="--param" type="text" optional="true" label="Query parameter." help="Query string parameter."/>
                <param argument="--ports" type="integer" optional="true" label="Port range" help="Port range for viewer and API. [Default: 8000-8099]"/>
                <param argument="--prefix" type="text" optional="true" label="URL prefix" help="URL prefix. [Default: view]"/>
                <param argument="--preview" type="text" optional="true" label="Field name" help="Field name"/>
                <param argument="--driver" type="text" optional="true" label="Webdriver" help="Webdriver to use (chromium or firefox). [Default: firefox]"/>
                <param name="driverlog" argument="--driver-log" type="text" optional="true" label="Logfile Path" help="Path to driver logfile for debugging. [Default: /dev/null]"/>
                <param argument="--local" type="boolean" optional="true" label="Local session" help="Start viewer for local session. [Default: False]"/>
                <param argument="--remote" type="boolean" optional="true" label="Remote Session" help="Start viewer for remote session. [Default: False]"/>
                <param argument="--timeout" type="integer" optional="true" label="Timeout" help="Time to wait for page load in seconds. Default (0) is no timeout. [Default: 0]"/>
                <param argument="--view" type="text" optional="true" label="Plot Type" help="Plot type (blob|cumulative|snail). [Default: blob]"/>
                <param argument="--host" type="text" optional="true" label="Hostname" help="Hostname. [Default: http://localhost]"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="blobdir" format="tgz" from_work_dir="./Blobdir.tgz" label="${tool.name} on ${on_string}: Blobdir.tgz">
            <filter>mode_conditional['selector'] == 'create'</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <param name="fasta" value="sample1.fasta"/>
            <param name="meta" value="sample1.yaml"/>
            <param name="taxid"/>
            <param name="taxdump"/>
            <!--output name="identifiers" file="identifiers.json"/-->
            <output name="blobdir" file="length.json, gc.json, identifiers.json, meta.json, ncount.json"/>
        </test>
    </tests>
    <help><![CDATA[
    BlobToolKit is a software suite to aid researchers in identifying and isolating non-target data in draft and publicly available genome assemblies. It can be used to process assembly, 
    read and analysis files for fully reproducible interactive exploration in the browser-based Viewer. BlobToolKit can be used during assembly to filter non-target DNA, helping researchers produce assemblies with high biological credibility.
    ]]></help>
    <expand macro="citations"/>
</tool>