<?xml version="1.0" encoding="UTF-8"?>
<tool id="rbc_mafft" name="MAFFT" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>Multiple alignment program for amino acid or nucleotide sequences</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="biotools"/>
    <expand macro="requirements" />
    <stdio>
        <exit_code range="1:" level="fatal" description="Error occurred. Please check Tool Standard Error" />
        <exit_code range=":-1" level="fatal" description="Error occurred. Please check Tool Standard Error" />
    </stdio>
    <version_command><![CDATA[mafft --version]]></version_command>
    <command><![CDATA[
  ## Concatenate all input datasets no matter how they were provided
  bash inputs.sh &&

  ## Count total number of sequences across input datasets
  ## Can't do this on the concatenated input data prepared above because it's
  ## just a regular file and we don't have Galaxy-generated metadata for it.
  #set sequence_count = 0
  #if $input.mapping == "implicit"
    #for $batch in $input.batches:
      #set sequence_count += int($batch.inputs.metadata.sequences)
    #end for
  #elif $input.mapping == "merge"
    #for $batch in $input.batches:
      #for $dataset in $batch.inputs:
        #set sequence_count += int($dataset.metadata.sequences)
      #end for
    #end for
  #end if

  ## For those cases in which MAFFT needs fasta3, set an env variable to make it
  ## find the executable. Necessary because the current version of MAFFT still
  ## expects a fasta34 executable in path, but we bundle a newer version.
  #if $cond_flavour.flavourType == "custom"
    #if $cond_flavour.guidetree.guidetree_generation == "original"
      #if $cond_flavour.guidetree.dist_flavour.distance_method == "--fastapair"
        export FASTA_4_MAFFT=`which @FASTA3_EXEC@` &&
      #end if
    #elif $cond_flavour.guidetree.guidetree_generation == "parttree"
      #if $cond_flavour.guidetree.parttree_selection.parttree_option == "--fastaparttree"
        export FASTA_4_MAFFT=`which @FASTA3_EXEC@` &&
      #end if
    #end if
  #end if

  ## groupsize warning
  #if $cond_flavour.flavourType == "custom"
    #if $cond_flavour.guidetree.guidetree_generation == "parttree"
      #if $cond_flavour.guidetree.parttree_selection.groupsize > $sequence_count
        echo "WARNING = Chosen groupsize number larger than number of input sequences. Not recommended for MAFFT." &&
      #end if
    #end if
  #end if

  ## alignment flavour
  #if $cond_flavour.flavourType != "custom"
    $cond_flavour.flavourType
  #else
    mafft
    #if $cond_flavour.flavourType == "custom"
      #if $cond_flavour.guidetree.guidetree_generation == "original"
        #if $cond_flavour.guidetree.dist_flavour.distance_method == "--6merpair"
          --6merpair
          --retree $cond_flavour.guidetree.dist_flavour.retree
        #elif $cond_flavour.guidetree.dist_flavour.distance_method == "--globalpair"
          --globalpair
          --weighti $cond_flavour.guidetree.dist_flavour.weighti
        #elif $cond_flavour.guidetree.dist_flavour.distance_method == "--localpair"
          --localpair
          --weighti $cond_flavour.guidetree.dist_flavour.weighti
          --lop $cond_flavour.guidetree.dist_flavour.lop
          --lep $cond_flavour.guidetree.dist_flavour.lep
          --lexp $cond_flavour.guidetree.dist_flavour.lexp
        #elif $cond_flavour.guidetree.dist_flavour.distance_method == "--genafpair"
          --genafpair
          --weighti $cond_flavour.guidetree.dist_flavour.weighti
          --lop $cond_flavour.guidetree.dist_flavour.lop
          --lep $cond_flavour.guidetree.dist_flavour.lep
          --lexp $cond_flavour.guidetree.dist_flavour.lexp
          --LOP $cond_flavour.guidetree.dist_flavour.LOP
          --LEXP $cond_flavour.guidetree.dist_flavour.LEXP
        #elif $cond_flavour.guidetree.dist_flavour.distance_method == "--fastapair"
          --fastapair
          --weighti $cond_flavour.guidetree.dist_flavour.weighti
        #end if
      #elif $cond_flavour.guidetree.guidetree_generation == "parttree"
        $cond_flavour.guidetree.parttree_selection.parttree_option
        --retree $cond_flavour.guidetree.parttree_selection.retree
        --partsize $cond_flavour.guidetree.parttree_selection.partsize
        #if $cond_flavour.guidetree.parttree_selection.groupsize == -1
          --groupsize $sequence_count
        #else
          --groupsize $cond_flavour.guidetree.parttree_selection.groupsize
        #end if
      #end if
    #end if
  #end if

  ## progressive alignement calculation
  --maxiterate $progressive_alignment_calculation.maxiterate
  $progressive_alignment_calculation.fft
  $progressive_alignment_calculation.noscore

  ## specify threads to use
  ## disable multithreading during iterative refinement step for reproducibility
  ## cmp. https://mafft.cbrc.jp/alignment/software/multithreading.html
  --thread \${GALAXY_SLOTS:-1} --threadit 0
  $datatype_selection.datatype
  #if $datatype_selection.datatype == "--nuc"
    #if $datatype_selection.matrix_condition.matrix == "PAM"
      $datatype_selection.matrix_condition.tm $datatype_selection.matrix_condition.jtt
    #elif $datatype_selection.matrix_condition.matrix == "custom"
      --fmodel '$datatype_selection.matrix_condition.fmodel'
    #end if
  #elif $datatype_selection.datatype == "--amino"
    #if $datatype_selection.matrix_condition.matrix == "BLOSUM"
      --bl $datatype_selection.matrix_condition.bl
    #elif $datatype_selection.matrix_condition.matrix == "PAM"
      $datatype_selection.matrix_condition.tm $datatype_selection.matrix_condition.jtt
    #elif $datatype_selection.matrix_condition.matrix == "custom"
      #if $datatype_selection.matrix_condition.aamatrix == "--aamatrix"
        --aamatrix '$datatype_selection.matrix_condition.fmodel'
      #elif $datatype_selection.matrix_condition.aamatrix == "--fmodel"
        --fmodel '$datatype_selection.matrix_condition.fmodel'
      #end if
    #end if
  #end if
  --ep $ep
  --op $op
  $reorder
  $outputFormat
  $treeout
  input.fa > '$outputAlignment'

  ## Output alignment tree
  #if $treeout
    && mv input.fa.tree '$outputTree'
  #end if
    ]]></command>
    <configfiles>
        <configfile filename="inputs.sh"><![CDATA[
  #if $input.mapping == "implicit"
    #for $batch in $input.batches:
cat $batch.inputs >> input.fa
      #end for 
  #elif $input.mapping == "merge"
    #for $batch in $input.batches:
      #for $dataset in $batch.inputs:
cat $dataset >> input.fa
      #end for
    #end for
  #end if
        ]]></configfile>
    </configfiles>
    <inputs>
        <conditional name="input">
            <param name="mapping" type="select" label="For multiple inputs generate" help="All you have is a single dataset with the sequences to align? You can skip this help text and continue with the default setting. For multiple input datasets, the first mode will launch separate MAFFT jobs for all sequences from the first, second, ..., n-th dataset/element from each input batch, respectively, resulting in n separate MSAs. The second mode will concatenate all input sequences from all inputs for a single run of MAFFT and will generate a single MSA.">
                <option value="implicit">one or several MSAs depending on input structure</option>
                <option value="merge">a single MSA of all sequences from all inputs</option>
            </param>
            <when value="implicit">
                <repeat name="batches" title="Input batch" default="1" min="1">
                    <param name="inputs" type="data" format="fasta" label="Sequences to align" help="Amino acid or nucleotide sequences in FASTA format. Add Dataset for concatenation of every additional dataset with each file of the first upload panel"/>
                </repeat>
            </when>
            <when value="merge">
                <repeat name="batches" title="Input batch" default="1" min="1">
                    <param name="inputs" multiple="true" type="data" format="fasta" label="Sequences to align" help="Amino acid or nucleotide sequences in FASTA format."/>
                </repeat>
            </when>
        </conditional>
        <conditional name="datatype_selection">
            <param name="datatype" type="select" label="Data type" help="Autodetection will use default settings for matrix selection, for Nucleic acid PAM 200 and for amino acid BLOSUM 62.">
                <option value="">Autodetection</option>
                <option value="--nuc">Nucleic acids</option>
                <option value="--amino">Amino acids</option>
            </param>
            <when value=""/>
            <when value="--nuc">
                <conditional name="matrix_condition">
                    <param name="matrix" type="select" label="Matrix-Selection" help="Choose matrix for nucleotide sequence, default setting = PAM 200">
                        <option value="PAM">PAM</option>
                        <option value="custom">Costum</option>
                    </param>
                    <when value="PAM">
                        <param argument="--jtt" type="integer" value="200" min="1" max="350" label="Coefficient of the JTT PAM matrix" />
                        <param argument="--tm" type="boolean" truevalue="--tm" falsevalue="--jtt" checked="false" label="Select, if the JTT Pam matrix is needed to aligne a transmembrane protein"/>
                    </when>
                    <when value="custom">
                        <param argument="--fmodel" type="data" format="txt" label="User-defined AA scoring matrix with incorporated information of AA/nuc composition." />
                    </when>
                </conditional>
            </when>
            <when value="--amino">
                <conditional name="matrix_condition">
                    <param name="matrix" type="select" label="Matrix-Selection" help="Default setting: BLOSUM 62">
                        <option value="BLOSUM" selected="true">BLOSUM</option>
                        <option value="PAM">PAM</option>
                        <option value="custom">Custom</option>
                    </param>
                    <when value="BLOSUM">
                        <param argument="--bl" type="select" display="radio" label="Coefficient of the BLOSUM matrix">
                            <option value="30">30</option>
                            <option value="45">45</option>
                            <option value="62" selected="true">62</option>
                            <option value="80">80</option>
                        </param>
                    </when>
                    <when value="PAM">
                        <param argument="--jtt" type="integer" value="200" min="1" max="350" label="Coefficient of the JTT PAM matrix" />
                        <param argument="--tm" type="boolean" truevalue="--tm" falsevalue="--jtt" checked="false" label="Select, if the JTT Pam matrix is needed to aligne a transmembrane protein."/>
                    </when>
                    <when value="custom">
                        <param argument="--aamatrix" type="data" format="txt" label="User-defined AA scoring matrix" help="The format of matrixfile is the same to that of BLAST. Ignored when nucleotide sequences are input."/>
                        <param argument="--fmodel" type="boolean" truevalue="--fmodel" falsevalue="--aamatrix" checked="False" label="Incorporate the AA/nuc composition information into the scoring matrix?" />
                    </when>
                </conditional>
            </when>
        </conditional>
        <conditional name="cond_flavour">
            <param name="flavourType" type="select" label="MAFFT flavour" help="Run mafft with pre-defined input parameters. Specification of these parameters can be found in the help section. If --auto, the tool automatically selects an appropriate strategy from L-INS-i, FFT-NS-i and FFT-NS-2, according to data size from few to many respectively. Default setting: FFT-NS-2.">
                <option value="mafft --auto">Auto</option>
                <option value="mafft-fftns" selected="true">FFT-NS-2</option>
                <option value="mafft-fftnsi">FFT-NS-i</option>
                <option value="mafft-nwns">NW-NS-2</option>
                <option value="mafft-nwnsi">NW-NS-i</option>
                <option value="mafft-linsi">L-INS-i</option>
                <option value="mafft-ginsi">G-INS-i</option>
                <option value="mafft-einsi">E-INS-i</option>
                <option value="custom">Custom Parameters</option>
            </param>
            <when value="mafft --auto"/>
            <when value="mafft-fftns"/>
            <when value="mafft-fftnsi"/>
            <when value="mafft-nwns"/>
            <when value="mafft-nwnsi"/>
            <when value="mafft-linsi"/>
            <when value="mafft-ginsi"/>
            <when value="mafft-einsi"/>
            <when value="custom">
                <conditional name="guidetree">
                    <param name="guidetree_generation" type="select" label="GuideTree-Generation" help="Parttree is recommended for a large number (> ~10,000) of sequences as input">
                        <option value="original">Original guidetree building method of MAFFT</option>
                        <option value="parttree">Fast guidetree building method with PartTree-algorithm</option>
                    </param>
                    <when value="original">
                        <conditional name="dist_flavour">
                            <param name="distance_method" type="select" label="Distance method" help="Distance method must be chosen regarding your data">
                                <option value="--6merpair" selected="true">Shared 6mers distance (fastest) (--6merpair)</option>
                                <option value="--globalpair">Global alignment (Needleman-Wunsch) (--globalpair)</option>
                                <option value="--localpair">Local alignment (Smith-Waterman) (--localpair)</option>
                                <option value="--genafpair">Local, affine gap cost (--genafpair)</option>
                                <option value="--fastapair">All pairwise alignments are computed with FASTA (--fastapair)</option>
                            </param>
                            <when value="--6merpair">
                                <param argument="--retree" type="integer" value="2" min="1" max="3" label="Guide tree is build this number of times in the progressive stage."/>
                            </when>
                            <when value="--globalpair">
                                <expand macro="weighti_param" />
                            </when>
                            <when value="--localpair">
                                <expand macro="weighti_param" />
                                <param argument="--lop" type="float" value="-2.0" label="Gap opening penalty at local pairwise alignment" help="-2.00 default value"/>
                                <param argument="--lep" type="float" value="0.1" label="Offset value at local pairwise alignment" help="0.1 default value"/>
                                <param argument="--lexp" type="float" value="-0.1" label="Gap extension penalty at local pairwise alignment." help="-0.1 default value" />
                            </when>
                            <when value="--genafpair">
                                <expand macro="weighti_param" />
                                <param argument="--lop" type="float" value="-2.0" label="Gap opening penalty at local pairwise alignment" help="-2.00 default value" />
                                <param argument="--lep" type="float" value="0.1" label="Offset value at local pairwise alignment" help="0.1 default value" />
                                <param argument="--lexp" type="float" value="-0.1" label="Gap extension penalty at local pairwise alignment." help="-0.1 default value" />
                                <param argument="--LOP" type="float" value="-6.00" label="Gap opening penalty to skip the alignment" help="-6.00 default value" />
                                <param argument="--LEXP" type="float" value="0.00" label="Gap extension penalty to skip the alignment" help="0 default value" />
                            </when>
                            <when value="--fastapair">
                                <expand macro="weighti_param" />
                            </when>
                        </conditional>
                    </when>
                    <when value="parttree">
                        <conditional name="parttree_selection">
                            <param name="parttree_option" type="select" label="Which distance for the fast tree-building method?">
                                <option value="--parttree" selected="true">Fast tree-building method with the 6mer distance (--parttree)</option>
                                <option value="--fastaparttree">Distances based on FASTA (--fastaparttree)</option>
                                <option value="--dpparttree">Distances based on DP. (Needleman-Wunsch) (--dpparttree)</option>
                            </param>
                            <when value="--parttree">
                                <expand macro="parttree_parameters" />
                            </when>
                            <when value="--fastaparttree">
                                <expand macro="parttree_parameters" />
                            </when>
                            <when value="--dpparttree">
                                <expand macro="parttree_parameters" />
                            </when>
                        </conditional>
                    </when>
                </conditional>
            </when>
        </conditional>
        <section name="progressive_alignment_calculation" title="Progressive alignement calculation" expanded="true">
            <param argument="--maxiterate" type="integer" value="0" min="0" max="1000" label="Maximum number of iterations" help="1000 for maximum quality" />
            <param argument="--fft" type="boolean" truevalue="--fft" falsevalue="--nofft" checked="True" label="Use FFT approximation in group-to-group alignment?" />
            <param argument="--noscore" type="boolean" truevalue="" falsevalue="--noscore" checked="True" label="Check alignment score in the iterative refinement stage?" />
        </section>
        <param argument="--ep" type="float" value="0.0" label="Gap extend penalty for group-to-group alignment" help="Offset value, which works like gap extension penalty, for group-to-group alignment. For E-INS-i, 0 is recommended to allow large gaps" />
        <param argument="--op" type="float" value="1.53" label="Gap opening penalty at group-to-group alignment." help="1.53 default value" />
        <param argument="--reorder" type="boolean" truevalue="--reorder" falsevalue="" checked="False" label="Reorder output?" help="Default order is input order." />
        <param argument="--treeout" type="boolean" truevalue="--treeout" falsevalue="" checked="False" label="Display alignment tree ?" />
        <param name="outputFormat" type="select" label="Output format" help="Either FASTA or ClustalW">
            <option value="" selected="true">FASTA</option>
            <option value="--clustalout">ClustalW</option>
            <option value="--phylipout">Phylip</option>
        </param>
    </inputs>
    <outputs>
        <data format="fasta" name="outputAlignment" label="${tool.name} on ${on_string}">
            <change_format>
                <when input="outputFormat" value="--clustalout" format="clustal"/>
                <when input="outputFormat" value="--phylipout" format="phylip"/>
            </change_format>
        </data>
        <data name="outputTree" format="txt" label="${tool.name} Guide Tree">
            <filter>treeout</filter>
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <conditional name="input">
                <param name="mapping" value="implicit"/>
                <repeat name="batches">
                    <param name="inputs" value="sample_amino.fa"/>
                </repeat>
            </conditional>
            <param name="outputFormat" value=""/>
            <output name="outputAlignment" ftype="fasta" file="mafft_auto_result.aln"/>
        </test>
        <test expect_num_outputs="1">
            <conditional name="input">
                <param name="mapping" value="implicit"/>
                <repeat name="batches">
                    <param name="inputs" value="sample_amino.fa"/>
                </repeat>
            </conditional>
            <conditional name="datatype_selection">
                <param name="datatype" value="--amino"/>
                <conditional name="matrix_condition">
                    <param name="matrix" value="BLOSUM"/>
                    <param name="bl" value="80"/>
                </conditional>
            </conditional>
            <conditional name="cond_flavor">
                <param name="flavourType" value="mafft-fftns"/>
            </conditional>
            <param name="outputFormat" value="--clustalout"/>
            <output name="outputAlignment" ftype="clustal" file="mafft_fftns_amino_result.aln" />
        </test>
        <!-- WARNING: the results of the following test depends on #threads.
        The result seems deterministic for single threaded execution, i.e. GALAXY_SLOTS=1 planemo test
        However, GH CI/CD uses 2 threads and results vary -->
        <test expect_num_outputs="1" >
            <conditional name="input">
                <param name="mapping" value="implicit"/>
                <repeat name="batches">
                    <param name="inputs" value="sample_nuc.fa"/>
                </repeat>
            </conditional>
            <conditional name="datatype_selection">
                <param name="datatype" value="--nuc"/>
                <conditional name="matrix_condition">
                    <param name="matrix" value="PAM"/>
                    <param name="jtt" value="40"/>
                </conditional>
            </conditional>
            <conditional name="cond_flavor">
                <param name="flavourType" value="mafft-fftns"/>
            </conditional>
            <param name="outputFormat" value="--phylipout"/>
            <output name="outputAlignment" ftype="phylip" file="mafft_fftns_nuc_result.aln" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="input">
                <param name="mapping" value="implicit"/>
                <repeat name="batches">
                    <param name="inputs" value="sample_amino.fa"/>
                </repeat>
            </conditional>
            <conditional name="datatype_selection">
                <param name="datatype" value="--amino"/>
                <conditional name="matrix_condition">
                    <param name="matrix" value="PAM"/>
                </conditional>
            </conditional>
            <conditional name="cond_flavour">
                <param name="flavourType" value="custom"/>
                <conditional name="guidetree">
                    <param name="guidetree_generation" value="original"/>
                    <conditional name="dist_flavour">
                        <param name="distance_method" value="--globalpair"/>
                        <param name="weighti" value="3"/>
                    </conditional>
                </conditional>
            </conditional>
            <section name="progressive_alignment_calculation">
                <param name="maxiterate" value="1000"/>
            </section>
            <param name="outputFormat" value="--clustalout"/>
            <output name="outputAlignment" ftype="clustal">
                <assert_contents>
                    <has_text text="G-INS-i"/>
                    <has_text text="CLUSTAL"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="1">
            <conditional name="input">
                <param name="mapping" value="implicit"/>
                    <repeat name="batches">
                        <param name="inputs" value="sample_amino.fa"/>
                    </repeat>
            </conditional>
            <conditional name="datatype_selection">
                <param name="datatype" value="--amino"/>
                <conditional name="matrix_condition">
                    <param name="matrix" value="PAM"/>
                </conditional>
            </conditional>
            <conditional name="cond_flavour">
                <param name="flavourType" value="custom"/>
                <conditional name="guidetree">
                    <param name="guidetree_generation" value="parttree"/>
                    <conditional name="parttree_selection">
                        <param name="parttree_option" value="--parttree"/>
                        <param name="retree" value="2"/>
                    </conditional>
                </conditional>
            </conditional>
            <param name="outputFormat" value=""/>
            <output name="outputAlignment" ftype="fasta" file="mafft_custom_parttree_result.aln" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="input">
                <param name="mapping" value="merge"/>
                <repeat name="batches">
                    <param name="inputs" value="sample_amino.fa"/>
                </repeat>
                <repeat name="datasets">
                    <param name="inputs" value="sample_nuc.fa"/>
                </repeat>
            </conditional>
            <conditional name="cond_flavour">
                <param name="flavourType" value="mafft-linsi"/>
            </conditional>
            <param name="outputFormat" value=""/>
            <output name="outputAlignment" ftype="fasta" file="mafft_linsi_row_result.aln" />
        </test>
    </tests>
    <help><![CDATA[
**What it does:**

MAFFT is a multiple sequence alignment program for unix-like operating systems.
It offers a range of multiple alignment methods:

From the `MAFFT man page <https://mafft.cbrc.jp/alignment/software/manual/manual.html>`__, an overview of the different predefined flavours of the tool.

**Accuracy-oriented methods:**

- *L-INS-i* (probably most accurate; recommended for <200 sequences; iterative refinement method incorporating local pairwise alignment information):

      - mafft --localpair --maxiterate 1000 input [> output]
- *G-INS-i* (suitable for sequences of similar lengths; recommended for <200 sequences; iterative refinement method incorporating global pairwise alignment information):

      - mafft --globalpair --maxiterate 1000 input [> output]
- *E-INS-i* (suitable for sequences containing large unalignable regions; recommended for <200 sequences):

      - mafft --ep 0 --genafpair --maxiterate 1000 input [> output]. For E-INS-i, the --ep 0 option is recommended to allow large gaps.

**Speed-oriented methods:**

- *FFT-NS-i* (iterative refinement method; two cycles only):

    - mafft --retree 2 --maxiterate 2 input [> output]
- *FFT-NS-2* (fast; progressive method):

    - mafft --retree 2 --maxiterate 0 input [> output]
- *NW-NS-i* (iterative refinement method without FFT approximation; two cycles only):

    - mafft --retree 2 --maxiterate 2 --nofft input [> output]
- *NW-NS-2* (fast; progressive method without the FFT approximation):

    - mafft --retree 2 --maxiterate 0 --nofft input [> output]

**Addtional methods for different flavours mentioned on the manual page of MAFFT, which you can build by custom:**

- *NW-NS-PartTree-1* (recommended for ~10,000 to ~50,000 sequences; progressive method with the PartTree algorithm):

    - mafft --retree 1 --maxiterate 0 --nofft --parttree input [> output]

- *FFT-NS-i* (iterative refinement method; max. 1000 iterations):

    - mafft --retree 2 --maxiterate 1000 input [> output]
- *FFT-NS-1* (very fast; recommended for >2000 sequences; progressive method with a rough guide tree):

    - mafft --retree 1 --maxiterate 0 input [> output]
    ]]></help>
    <expand macro="citations" />
</tool>
